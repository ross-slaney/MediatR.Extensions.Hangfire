name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ["8.0.x"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore MediatR.Hangfire.Extensions.sln
        working-directory: ./src

      - name: Build
        run: dotnet build MediatR.Hangfire.Extensions.sln --no-restore --configuration Release
        working-directory: ./src

      - name: Run tests with coverage
        run: dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=../../../TestResults/
        working-directory: ./src/tests/MediatR.Hangfire.Extensions.Tests

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./TestResults/coverage.cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: "./TestResults/coverage.cobertura.xml"
          targetdir: "coveragereport"
          reporttypes: "Html;Badges"

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport/

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');

            try {
              const coverageXml = fs.readFileSync('./TestResults/coverage.cobertura.xml', 'utf8');
              const parser = new xml2js.Parser();
              
              parser.parseString(coverageXml, (err, result) => {
                if (err) {
                  console.log('Error parsing coverage XML:', err);
                  return;
                }
                
                const coverage = result.coverage.$;
                const lineRate = (parseFloat(coverage['line-rate']) * 100).toFixed(2);
                const branchRate = (parseFloat(coverage['branch-rate']) * 100).toFixed(2);
                
                const comment = `## üìä Test Coverage Report
                
                | Metric | Coverage |
                |--------|----------|
                | **Lines** | ${lineRate}% |
                | **Branches** | ${branchRate}% |
                
                üìÅ [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                ${lineRate >= 85 ? '‚úÖ Great coverage!' : lineRate >= 70 ? '‚ö†Ô∏è Good coverage, could be improved' : '‚ùå Coverage below recommended threshold (70%)'}`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              });
            } catch (error) {
              console.log('Error reading coverage file:', error);
            }

  build-example:
    name: Build Example Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore example dependencies
        run: dotnet restore MediatR.Hangfire.Example.sln
        working-directory: ./example

      - name: Build example
        run: dotnet build MediatR.Hangfire.Example.sln --no-restore --configuration Release
        working-directory: ./example

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore MediatR.Hangfire.Extensions.sln
        working-directory: ./src

      - name: Check formatting
        run: dotnet format MediatR.Hangfire.Extensions.sln --verify-no-changes --verbosity diagnostic
        working-directory: ./src

      - name: Run security scan
        run: dotnet list MediatR.Hangfire.Extensions.sln package --vulnerable --include-transitive
        working-directory: ./src

  package:
    name: Package & Publish
    runs-on: ubuntu-latest
    needs: [test, quality-checks]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for GitVersion

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Restore dependencies
        run: dotnet restore MediatR.Hangfire.Extensions.sln
        working-directory: ./src

      - name: Build for packaging
        run: dotnet build MediatR.Hangfire.Extensions.sln --no-restore --configuration Release
        working-directory: ./src

      - name: Create NuGet package
        run: dotnet pack --no-build --configuration Release --output ./packages -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
        working-directory: ./src/MediatR.Hangfire.Extensions

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ steps.gitversion.outputs.nuGetVersionV2 }}
          path: ./src/MediatR.Hangfire.Extensions/packages/*.nupkg

      - name: Publish to NuGet
        run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        working-directory: ./src/MediatR.Hangfire.Extensions
